"use strict";(self.webpackChunkdocs_technician_upp=self.webpackChunkdocs_technician_upp||[]).push([[474],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(u,".").concat(m)]||d[m]||l[m]||s;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1314:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=n(4250),a=(n(9496),n(9613));const s={sidebar_position:1},i="Estructura de pruebas unitarias",o={unversionedId:"test/unit test framework",id:"test/unit test framework",title:"Estructura de pruebas unitarias",description:"La importancia de las  pruebas",source:"@site/backend/test/1-unit test framework.md",sourceDirName:"test",slug:"/test/unit test framework",permalink:"/docs-technician-upp/docs/test/unit test framework",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/backend/test/1-unit test framework.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tests",permalink:"/docs-technician-upp/docs/category/tests"},next:{title:"Ejecutando todas las pruebas",permalink:"/docs-technician-upp/docs/test/running all tests"}},u={},c=[{value:"C\xf3digo",id:"c\xf3digo",level:2},{value:"Creaci\xf3n",id:"creaci\xf3n",level:2},{value:"Ejecuci\xf3n",id:"ejecuci\xf3n",level:2}],p={toc:c};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"estructura-de-pruebas-unitarias"},"Estructura de pruebas unitarias"),(0,a.kt)("p",null,"La importancia de las ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"}," pruebas "))),(0,a.kt)("p",null,"Para este proyecto se decidi\xf3 hacer las pruebas unitarias para cada ruta usando ",(0,a.kt)("a",{parentName:"p",href:"https://docs.pytest.org/en/7.1.x/getting-started.html"},(0,a.kt)("inlineCode",{parentName:"a"},"PyTest")),", este es un tema muy importante, ya que es donde se determina si una ruta funciona como debe, el encargado de hacer estas rutas debe seguir la siguiente estructura:  "),(0,a.kt)("h2",{id:"c\xf3digo"},"C\xf3digo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from fastapi.testclient import TestClient\nfrom src.app import app\n\nclinet = TestClient(app)\n\n\ndef test_post():\n    request = clinet.post("/capitulo/", json={\n        "idCapitulo": 0,\n        "status": 0,\n        "numero": 0,\n        "nombre": "string",\n        "tipoGasto": "string",\n        "nombreGasto": "string",\n        "descripcion": "string"\n\n    })\n    assert request.status_code == 201\n    assert request.json() == {\n        "idCapitulo": 1\n    }\n\n\ndef test_get():\n    request = clinet.get("/capitulo/")\n    assert request.status_code == 200\n    assert request.json() == {\n        "values": [\n            {\n                "idCapitulo": 1,\n                "status": 0,\n                "numero": 0,\n                "nombre": "string",\n                "tipoGasto": "string",\n                "nombreGasto": "string",\n                "descripcion": "string"\n            }\n        ],\n        "num": 1\n    }\n\n\ndef test_put():\n    request = clinet.put("/capitulo/", json={\n        "idCapitulo": 1,\n        "status": 1,\n        "numero": 1,\n        "nombre": "string",\n        "tipoGasto": "string",\n        "nombreGasto": "string",\n        "descripcion": "string"\n    }\n    )\n    assert request.status_code == 200\n    assert request.json() == {\n        "idCapitulo": 1,\n        "status": 1,\n        "numero": 1,\n        "nombre": "string",\n        "tipoGasto": "string",\n        "nombreGasto": "string",\n        "descripcion": "string"\n    }\n\n\ndef test_delete():\n    request = clinet.delete("/capitulo/1")\n    assert request.status_code == 204\n\n')),(0,a.kt)("h2",{id:"creaci\xf3n"},"Creaci\xf3n"),(0,a.kt)("p",null,"Como vemos se crea un cliente que pueda ejecutar estas rutas, se crean funciones de prueba para cada ruta en donde se decide que se enviar\xe1 y como y que se espera como respuesta desde el status code hasta la respuesta json."),(0,a.kt)("h2",{id:"ejecuci\xf3n"},"Ejecuci\xf3n"),(0,a.kt)("p",null,"Para ejecutar cualquier prueba de forma independiente puedes hacer lo siguiente:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"}," pytest -vv ./test/test.py\n")))}l.isMDXComponent=!0}}]);